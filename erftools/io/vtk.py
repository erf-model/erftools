import numpy as np
import struct

def write_binary_structured_vtk(filename,
                                x_grid, y_grid, z_grid,
                                indexing='xy',
                                k_to_delete=[],
                                mirrored_x=False,
                                top_down=False,
                                point_data=None,
                                velocity=None):
    """
    General function to write a binary VTK file on a structured grid.

    Arguments
    ---------
    filename : str
        Name of the VTK file to write.
    x_grid, y_grid, z_grid : numpy.ndarray
        2D, 2D, and 3D arrays of grid coordinates, respectively.
    indexing : {'xy', 'ij'}, optional
        Input grid indexing, following numpy naming convention
    k_to_delete : list, optional
        Indices of vertical levels to exclude
    mirrored_x : bool, optional
        Output has the first index reversed.
    top_down : bool, optional
        Output has the last index reversed.
    point_data : dict, optional
        Dictionary of output scalar data associated with the grid points.
    velocity : numpy.ndarray, optional
        4D array (nx,ny,nz,3) of output velocity data.
    """
    assert indexing in ('xy','ij') # Cartesian or matrix (row,col)

    x_grid = np.asarray(x_grid)
    y_grid = np.asarray(y_grid)

    if indexing == 'xy':
        nx, ny = x_grid.shape
    elif indexing == 'ij':
        ny, nx = x_grid.shape
    nz = z_grid.shape[2]
    print('nx, ny, nz =', nx, ny, nz)

    nzval = nz - len(k_to_delete)

    # TODO: rewrite without nested loops for efficiency

    irange = range(nx-1,-1,-1) if mirrored_x else range(nx)
    krange = range(nz-1,-1,-1) if top_down else range(nz)

    with open(filename, 'wb') as f:
          # Write the VTK header
        f.write(b'# vtk DataFile Version 3.0\n')
        f.write(b'Generated by Python script\n')
        f.write(b'BINARY\n')
        f.write(b'DATASET STRUCTURED_GRID\n')
        f.write(f'DIMENSIONS {nx} {ny} {nzval}\n'.encode())
        f.write(f'POINTS {nx * ny * nzval} float\n'.encode())

        # Write grid points
        #points = np.stack((x_grid.ravel(), y_grid.ravel(), z_grid.ravel()), axis=-1)
        #f.write(struct.pack('>' + 'f' * points.size, *points.ravel()))

        # Write grid points using a nested for loop
        for k in krange: # may be reversed
            z = np.mean(z_grid[:, :, k])
            if k in k_to_delete:
                print("Val is ", k)
                continue
            if indexing == 'xy':
                for j in range(ny):
                    for i in range(nx):
                        x = x_grid[i, j]
                        y = y_grid[i, j]
                        f.write(struct.pack('>fff', x, y, z))
            elif indexing == 'ij':
                for j in range(ny):
                    for i in range(nx):
                        x = x_grid[j, i]
                        y = y_grid[j, i]
                        f.write(struct.pack('>fff', x, y, z))

        # Write point data (if any)
        if point_data is not None:
            f.write(f'POINT_DATA {nx * ny * nzval}\n'.encode())
            for name, data in point_data.items():
                f.write(f'SCALARS {name} float 1\n'.encode())
                f.write(b'LOOKUP_TABLE default\n')
                for k in krange:  # Iterate over the z-dimension (may be reversed)
                    if k in k_to_delete:
                        continue
                    for j in range(ny):  # Iterate over the y-dimension
                        for i in irange:  # Iterate over the x-dimension (may be reversed)
                            value = data[i, j, k]
                            f.write(struct.pack('>f', value))

            # Write velocity vector field
            if velocity is not None:
                f.write("VECTORS velocity float\n".encode())
                for k in krange: # may be reversed
                    if k in k_to_delete:
                        continue
                    for j in range(ny):
                        for i in irange: # may be reversed
                            vx, vy, vz = velocity[i, j, k]
                            f.write(struct.pack('>fff', vx, vy, vz))

# formerly `write_binary_vtk_structured_grid`
def write_binary_vtk_on_native_grid(filename,
                                    x_grid, y_grid, z_grid,
                                    k_to_delete=[],
                                    point_data=None,
                                    velocity=None):
    if point_data is not None:
        # don't write out lat,lon
        point_data = {
            k:v for k,v in point_data.items()
            if k not in ['latitude','longitude']
        }
    return write_binary_structured_vtk(
            filename,
            x_grid, y_grid, z_grid,
            indexing='xy',
            k_to_delete=k_to_delete,
            mirrored_x=True,
            top_down=True,
            point_data=point_data,
            velocity=velocity)

# formerly `write_binary_vtk_cartesian_file`
def write_binary_vtk_on_cartesian_grid(filename,
                                       x_grid, y_grid, z_grid,
                                       point_data=None):
    return write_binary_structured_vtk(
            filename,
            x_grid, y_grid, z_grid,
            indexing='ij',
            mirrored_x=False,
            top_down=False,
            point_data=point_data)
